	private List<User> findCurrUsers(Task nextTask,User user) {
		List<IdentityLink> list = taskService.getIdentityLinksForTask(nextTask.getId());
		List<User> users = new ArrayList<>();
		for (IdentityLink identityLink : list) {
			String groupId = identityLink.getGroupId();
			ProcUserGroup userGroup = procUserGroupDao.findById(groupId).get();
			String param = userGroup.getParam();
			String paramValue = null;
			if ("user_id".equals(param)) {
				paramValue = user.getId();
			}
			else if ("department_id".equals(param)) {
				paramValue = user.getDepartmentId();
			}
			else if ("company_id".equals(param)) {
				paramValue = user.getCompanyId();
			}
			String sql = userGroup.getIsql().replaceAll("\\$\\{" + param + "\\}", paramValue);
			Query query = entityManager.createNativeQuery(sql);
			query.unwrap(SQLQuery.class).setResultTransformer(Transformers.aliasToBean(EmployeeNameOnlyDto.class));
			users.addAll(query.getResultList());
		}
		return users;
	}
	
		
		Task next = taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
		if(next != null) {
			List<User> users = findCurrUsers(next, user);
			String usernames = "", userIdS = "";
			for (User user1 : users) {
				usernames += user1.getUsername() + " ";
				userIdS += user1.getId();
			}
			instance.setProcCurrNodeUserId(userIdS);
			instance.setProcCurrNodeUserId(usernames);
		}